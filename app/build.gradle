apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'
def releaseTime() {
    return new Date().format("yyyy.MM.dd", TimeZone.getTimeZone("UTC"))
}
Properties props = new Properties()
props.load(new FileInputStream(file("signing.properties")))
android {
    compileSdkVersion rootProject.ext.android["compileSdkVersion"]
    buildToolsVersion rootProject.ext.android["buildToolsVersion"]
    useLibrary 'org.apache.http.legacy'

    defaultConfig {
        applicationId "com.delta.smt"
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        versionCode rootProject.ext.android["versionCode"]
        versionName rootProject.ext.android["versionName"]
        testInstrumentationRunner rootProject.ext.dependencies["androidJUnitRunner"]
    }
    signingConfigs {
        release {//发布版本的签名配置
            storeFile file(props['KEYSTORE_FILE'])
            keyAlias props['KEY_ALIAS']
            storePassword props['KEYSTORE_PWD']
            keyPassword props['KEY_PWD']
        }
        debug {//调试版本的签名配置
            storeFile file(props['DEBUG_KEYSTORE'])
            keyAlias props['DEBUG_ALIAS']
            storePassword props['DEBUG_KEYSTORE_PWD']
            keyPassword props['DEBUG_KEY_PWD']
        }
    }
    buildTypes {
        applicationVariants.all { variant ->
            variant.outputs.each { output ->
                def outputFile = output.outputFile
                if (variant.buildType.name =='release') {
                    def fileName = "App_v${defaultConfig.versionName}_${releaseTime()}_release.apk"

                    output.outputFile = new File(outputFile.parent, fileName)
                }else if(variant.buildType.name == 'debug'){
                    def fileName = "App_v${defaultConfig.versionName}_${releaseTime()}_debug.apk"

                    output.outputFile = new File(outputFile.parent, fileName)
                }
            }
        }
        debug {
            buildConfigField "boolean", "LOG_DEBUG", "true"
            buildConfigField "boolean", "USE_CANARY", "true"
            minifyEnabled false
            //signingConfig signingConfigs.debug
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        release {
            buildConfigField "boolean", "LOG_DEBUG", "false"
            buildConfigField "boolean", "USE_CANARY", "false"
            // 混淆
            minifyEnabled true
            // Zipalign优化
            zipAlignEnabled true
            // 移除无用的resource文件
            shrinkResources true
            signingConfig signingConfigs.debug
            // 前一部分代表系统默认的android程序的混淆文件，该文件已经包含了基本的混淆声明，后一个文件是自己的定义混淆文件
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        }


    productFlavors {
        mock {
            applicationIdSuffix = ".mock"
        }
        prod {
            applicationIdSuffix = ".prod"
        }
    }
// Remove mockRelease as it's not needed.
//    android.variantFilter { variant ->
//        if (variant.buildType.name.equals('release')
//                && variant.getFlavors().get(0).name.equals('mock')) {
//            variant.setIgnore(true);
//        }
//    }

    lintOptions {
        disable 'InvalidPackage'
        disable "ResourceType"
        abortOnError false
    }
    aaptOptions.cruncherEnabled = false
    aaptOptions.useNewCruncher = false

    lintOptions {

        disable 'RestrictedApi'
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'

    })
    testCompile rootProject.ext.dependencies["junit"]
    apt rootProject.ext.dependencies["dagger2-apt-compiler"]
    provided rootProject.ext.dependencies["javax.annotation"]
    apt rootProject.ext.dependencies["butterknife-apt"]
    compile project(':commonlibs')
    debugCompile rootProject.ext.dependencies["canary-debug"]
    releaseCompile rootProject.ext.dependencies["canary-release"]
    testCompile rootProject.ext.dependencies["canary-release"]
    provided rootProject.ext.dependencies["design"]
    compile rootProject.ext.dependencies["countdownview"]
    compile rootProject.ext.dependencies["barcodecollector"]
    compile rootProject.ext.dependencies["familiarrecycler"]
    compile rootProject.ext.dependencies["acra"]
    compile rootProject.ext.dependencies["richeditor"]
    compile project(':countTime')
    compile project(':websocketmanager')
    compile project(':ttsmanager')
    compile project(':dropdownfiltermenu')
    compile project(':updatelibs')
}
